name: Manifest Check
on:
  push:
    paths:
      - 'projects/**'
    branches:
      - main

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
            token: ${{ secrets.PAT_ADMIN }}
            fetch-depth: 2

      - name: Fetch Commit Author
        id: commit-author
        run: |
          AUTHOR="${GITHUB_ACTOR}"  # Directly use the actor for a push event
          echo "AUTHOR=$AUTHOR" >> $GITHUB_ENV
      
      - name: Determine Affected Project
        id: affected-project
        run: |
          # Get all changed files under projects/
          changed_files=$(git diff --name-only $GITHUB_SHA^ $GITHUB_SHA -- 'projects/*')
          
          # Extract unique project directories that have a manifest
          declare -a projects
          while IFS= read -r file; do
            project_dir=$(echo "$file" | cut -d'/' -f2)
            if [[ -f "projects/$project_dir/manifest.json" ]]; then
              projects+=("$project_dir")
            fi
          done <<< "$changed_files"

          # Remove duplicates and format as JSON array
          unique_projects=($(printf "%s\n" "${projects[@]}" | sort -u))
          echo "Found ${#unique_projects[@]} projects to validate: ${unique_projects[*]}"
          
          # Set outputs
          if [ ${#unique_projects[@]} -eq 0 ]; then
            echo "::notice::No project manifests need validation"
            echo "SKIP_VALIDATION=true" >> $GITHUB_ENV
          else
            echo "projects=${unique_projects[*]}" >> $GITHUB_OUTPUT
          fi

      - name: Validate Manifests
        if: steps.affected-project.outputs.projects
        run: |
          for project in ${{ steps.affected-project.outputs.projects }}; do
            echo "::group::Validating $project"
            python .github/plugins/validate_manifest.py \  # validate manifest files for all new changes
              "projects/$project/manifest.json" \
              "${{ github.actor }}"
            echo "::endgroup::"
          done

          python .github/plugins/update_registry.py
          git config --global user.name "GitHub Bot"
          git config --global user.email "actions@github.com"
          git add projects/_registry.json
          git commit -m "[CLI] Update registry for ${{ steps.affected-project.outputs.projects }}"  # update registry only if actual files are affected
          git push

      - name: Skip notice
        if: env.SKIP_VALIDATION == 'true'
        run: echo "::notice::Skipping validation - no project manifests were modified"

  validate-push-privileges:
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Check Team Membership
        id: check-admin
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const { data: members } = await github.rest.teams.listMembersInOrg({
                org: context.repo.owner,
                team_slug: 'admins', // Must match your team name exactly
              });
              const isAdmin = members.some(member => member.login === context.actor);
              core.setOutput('is-admin', isAdmin);
            } catch (error) {
              core.setFailed(`Admin check failed: ${error.message}`);
              core.setOutput('is-admin', false);
            }
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Admin Bypass
        id: bypass
        run: |
          if [ "${{ steps.check-admin.outputs.is-admin }}" == "true" ]; then
            echo "Admin user detected - bypassing validation"
            echo "SKIP_VALIDATION=true" >> $GITHUB_ENV
          else
            echo "Proceeding with validation"
          fi

      - name: Validate Push
        if: env.SKIP_VALIDATION != 'true'
        run: |
          python .github/plugins/validate_push.py "${{ github.actor }}"

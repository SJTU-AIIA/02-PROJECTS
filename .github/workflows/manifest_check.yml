name: Manifest Check
on:
  push:
    paths:
      - 'projects/**'
    branches:
      - main

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Fetch Commit Author
        id: commit-author
        run: |
          echo "The github.ref_name is: ${{ github.ref_name }}"
          AUTHOR="${GITHUB_ACTOR}"  # Directly use the actor for a push event
          echo "AUTHOR=$AUTHOR" >> $GITHUB_ENV
      
          - name: Determine Affected Project
          id: affected-project
          run: |
            # Get all changed files in projects/ directory
            CHANGED_FILES=$(git diff --name-only $GITHUB_SHA^ $GITHUB_SHA | grep '^projects/')
            
            # Exit if no project files were changed
            if [ -z "$CHANGED_FILES" ]; then
              echo "::warning::No changes detected in any project directories"
              echo "SKIP_VALIDATION=true" >> $GITHUB_ENV
              exit 0
            fi
            
            # Extract unique project directories (second path component)
            PROJECT_DIRS=$(echo "$CHANGED_FILES" | awk -F'/' 'NF>1 {print $2}' | sort | uniq)
            
            # Verify each project has a manifest.json
            VALID_PROJECTS=""
            for DIR in $PROJECT_DIRS; do
              if [ -f "projects/$DIR/manifest.json" ]; then
                VALID_PROJECTS="$VALID_PROJECTS $DIR"
              else
                echo "::warning::Project $DIR is missing manifest.json"
              fi
            done
            
            # Trim whitespace and set output
            VALID_PROJECTS=$(echo "$VALID_PROJECTS" | xargs)
            if [ -z "$VALID_PROJECTS" ]; then
              echo "::error::No valid projects with manifest.json found"
              exit 1
            fi
            
            echo "AFFECTED_PROJECTS=$VALID_PROJECTS" >> $GITHUB_ENV
            echo "Valid projects to validate: $VALID_PROJECTS"

      - name: Validate Manifests
        run: |
          for PROJECT in ${{ env.AFFECTED_PROJECTS }}; do
              python .github/plugins/validate_manifest.py "projects/$PROJECT/manifest.json" "${{ env.AUTHOR }}"
          done

  update:
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Update Registry
        run: |
          python .github/plugins/update_registry.py
          git config --global user.name "GitHub Bot"
          git config --global user.email "actions@github.com"
          git add projects/_registry.json
          git commit -m "[CLI] Update registry for ${{ env.AFFECTED_PROJECTS }}"  # Reference the branch/tag here
          git push

  validate-push-privileges:
    needs: update
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Check Team Membership
        id: check-admin
        uses: actions/github-script@v6
        with:
          script: |
            const { data: members } = await github.rest.teams.listMembersInOrg({
              org: context.repo.owner,
              team_slug: 'admins',  # Replace with your actual team slug
            });
            const isAdmin = members.some(member => member.login === context.actor);
            core.setOutput('is-admin', isAdmin);
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Admin Bypass
        id: bypass
        run: |
          if [ "${{ steps.check-admin.outputs.is-admin }}" == "true" ]; then
            echo "Admin user detected - bypassing validation"
            echo "SKIP_VALIDATION=true" >> $GITHUB_ENV
          else
            echo "Proceeding with validation"
          fi

      - name: Validate Push
        if: env.SKIP_VALIDATION != 'true'
        run: |
          python .github/plugins/validate_push.py "${{ github.actor }}"  # Use a different validation script if needed
